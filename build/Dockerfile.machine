# syntax=docker/dockerfile:1

# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Dockerfile reference guide at
# https://docs.docker.com/go/dockerfile-reference/

# Want to help us make this template better? Share your feedback here: https://forms.gle/ybq9Krt8jtBL3iCk7

ARG RUST_VERSION=1.81.0
ARG APP_NAME=verifier

################################################################################
# Create a stage for building the application.

FROM rust:${RUST_VERSION}-alpine AS rust_build
ARG APP_NAME
WORKDIR /app

# Install host build dependencies.
RUN apk add --no-cache clang lld libressl-dev pkgconfig

RUN rustup target add riscv64gc-unknown-linux-gnu

# Build the application.
# Leverage a cache mount to /usr/local/cargo/registry/
# for downloaded dependencies, a cache mount to /usr/local/cargo/git/db
# for git repository dependencies, and a cache mount to /app/target/ for
# compiled dependencies which will speed up subsequent builds.
# Leverage a bind mount to the src directory to avoid having to copy the
# source code into the container. Once built, copy the executable to an
# output directory before the cache mounted /app/target is unmounted.
RUN --mount=type=bind,source=./cmd/dapp/lib/src,target=src \
  --mount=type=bind,source=./cmd/dapp/lib/Cargo.toml,target=Cargo.toml \
  --mount=type=cache,target=/app/target/ \
  --mount=type=cache,target=/usr/local/cargo/git/db \
  --mount=type=cache,target=/usr/local/cargo/registry/ \
  cargo build --release --target riscv64gc-unknown-linux-gnu && \
  cp target/riscv64gc-unknown-linux-gnu/release/lib${APP_NAME}.a /usr/lib

################################################################################
# cross build stage
FROM golang:1.22.5-bookworm AS build
ARG APP_NAME
WORKDIR /src

# Install Go dependencies
RUN apt-get update && apt-get install -y gcc g++-riscv64-linux-gnu

COPY --from=rust_build /usr/lib/lib${APP_NAME}.a /usr/lib/

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage a cache mount to /go/pkg/mod/ to speed up subsequent builds.
# Leverage bind mounts to go.sum and go.mod to avoid having to copy them into
# the container.
RUN --mount=type=cache,target=/go/pkg/mod/ \
    --mount=type=bind,source=./go.sum,target=./go.sum \
    --mount=type=bind,source=./go.mod,target=./go.mod \
    go mod download -x

# Build the application.
# Leverage a cache mount to /go/pkg/mod/ to speed up subsequent builds.
# Leverage a bind mount to the current directory to avoid having to copy the
# source code into the container.
RUN --mount=type=cache,target=/go/pkg/mod/ \
    --mount=type=bind,target=. \
    CGO_ENABLED=1 GOARCH=riscv64 GOOS=linux CC=riscv64-linux-gnu-gcc go build -ldflags '-extldflags "-static"' -o /bin/app ./cmd/dapp/

# runtime stage: produces final image that will be executed
FROM --platform=linux/riscv64 riscv64/ubuntu:22.04 as runtime

ARG MACHINE_EMULATOR_TOOLS_VERSION=0.14.1
ADD https://github.com/cartesi/machine-emulator-tools/releases/download/v${MACHINE_EMULATOR_TOOLS_VERSION}/machine-emulator-tools-v${MACHINE_EMULATOR_TOOLS_VERSION}.deb /
RUN dpkg -i /machine-emulator-tools-v${MACHINE_EMULATOR_TOOLS_VERSION}.deb \
  && rm /machine-emulator-tools-v${MACHINE_EMULATOR_TOOLS_VERSION}.deb

  LABEL io.cartesi.rollups.sdk_version=0.9.0
  LABEL io.cartesi.rollups.ram_size=128Mi

ARG DEBIAN_FRONTEND=noninteractive
RUN <<EOF
set -e
apt-get update
apt-get install -y --no-install-recommends \
  busybox-static=1:1.30.1-7ubuntu3
rm -rf /var/lib/apt/lists/* /var/log/* /var/cache/*
useradd --create-home --user-group dapp
EOF

WORKDIR /var/opt/cartesi-app

# TODO: how can i see the file system tree to choose the right permissions?
RUN chown -R dapp:dapp .

ENV PATH="/opt/cartesi/bin:${PATH}"

COPY --from=build /bin/app app

ENTRYPOINT ["rollup-init"]

CMD ["/var/opt/cartesi-app/app"]